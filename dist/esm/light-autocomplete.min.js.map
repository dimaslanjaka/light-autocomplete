{"version":3,"file":"light-autocomplete.min.js","sources":["../../src/autocomplete.js","../../../src/findStr.ts"],"sourcesContent":["import findStr from './findStr';\n\n/**\n * autocomplete\n * @param {HTMLElement|Element|HTMLInputElement|HTMLTextAreaElement|null} input\n * @param {string[]} arrayData\n * @param {boolean} wildcard\n */\nexport default function autocomplete(input, arrayData, wildcard) {\n  // skip null\n  if (input == null) return console.error('null input for autocomplete');\n  /*the autocomplete function takes two arguments,\n  the text field element and an array of possible autocompleted values:*/\n  var currentFocus;\n  /*execute a function when someone writes in the text field:*/\n  input.addEventListener('input', function (e) {\n    var a, b;\n    const keyword = e.target.value;\n    /*close any already open lists of autocompleted values*/\n    closeAllLists();\n    if (!keyword) {\n      return false;\n    }\n    currentFocus = -1;\n    /*create a DIV element that will contain the items (values):*/\n    a = document.createElement('DIV');\n    a.setAttribute('id', e.target.id + 'autocomplete-list');\n    a.setAttribute('class', 'light-autocomplete-items');\n    /*append the DIV element as a child of the autocomplete container:*/\n    e.target.parentNode.appendChild(a);\n    /*for each item in the array...*/\n    // for (let i = 0; i < arrayData.length; i++) {\n    //   /*check if the item starts with the same letters as the text field value:*/\n    //   if (arrayData[i].substring(0, keyword.length).toUpperCase() == keyword.toUpperCase()) {\n    //     /*create a DIV element for each matching element:*/\n    //     b = document.createElement('DIV');\n    //     /*make the matching letters bold:*/\n    //     b.innerHTML = '<strong>' + arrayData[i].substring(0, keyword.length) + '</strong>';\n    //     b.innerHTML += arrayData[i].substring(keyword.length);\n    //     /*insert a input field that will hold the current array item's value:*/\n    //     b.innerHTML += \"<input type='hidden' value='\" + arrayData[i] + \"'>\";\n    //     /*execute a function when someone clicks on the item value (DIV element):*/\n    //     b.addEventListener('click', function (e) {\n    //       /*insert the value for the autocomplete text field:*/\n    //       input.value = e.target.getElementsByTagName('input')[0].value;\n    //       /*close the list of autocompleted values,\n    //           (or any other open lists of autocompleted values:*/\n    //       closeAllLists();\n    //     });\n    //     a.appendChild(b);\n    //   }\n    // }\n    const dictionaries = findStr(keyword, arrayData, wildcard);\n    // .sort((a, b) => {\n    //   const ai = a.indexOf(keyword);\n    //   const bi = b.indexOf(keyword);\n    //   return (ai > -1 && bi > -1 && ai - bi) || -1;\n    // })\n    // .reverse();\n    for (let i = 0; i < dictionaries.length; i++) {\n      const line = dictionaries[i];\n      b = document.createElement('DIV');\n      /*create a DIV element for each matching element:*/\n      b = document.createElement('DIV');\n      /*make the matching letters bold:*/\n      b.innerHTML = '';\n      /* print output string */\n      // b.innerHTML += '<b>' + line.substring(0, keyword.length) + '</b>';\n      // b.innerHTML += line.substring(keyword.length);\n      b.innerHTML += line.replace(new RegExp(keyword, 'gim'), '<b>' + keyword + '</b>');\n      /*insert a input field that will hold the current array item's value:*/\n      b.innerHTML += \"<input type='hidden' value='\" + line + \"'>\";\n      /*execute a function when someone clicks on the item value (DIV element):*/\n      b.addEventListener('click', function (e) {\n        /*insert the value for the autocomplete text field:*/\n        input.value = e.target.getElementsByTagName('input')[0].value;\n        /*close the list of autocompleted values,\n              (or any other open lists of autocompleted values:*/\n        closeAllLists();\n      });\n      a.appendChild(b);\n    }\n  });\n\n  /*execute a function presses a key on the keyboard:*/\n  input.addEventListener('keydown', function (e) {\n    var x = document.getElementById(e.target.id + 'autocomplete-list');\n    if (x) x = x.getElementsByTagName('div');\n    if (e.keyCode == 40) {\n      /*If the arrow DOWN key is pressed,\n        increase the currentFocus variable:*/\n      currentFocus++;\n      /*and and make the current item more visible:*/\n      addActive(x);\n    } else if (e.keyCode == 38) {\n      //up\n      /*If the arrow UP key is pressed,\n        decrease the currentFocus variable:*/\n      currentFocus--;\n      /*and and make the current item more visible:*/\n      addActive(x);\n    } else if (e.keyCode == 13) {\n      /*If the ENTER key is pressed, prevent the form from being submitted,*/\n      e.preventDefault();\n      if (currentFocus > -1) {\n        /*and simulate a click on the \"active\" item:*/\n        if (x) x[currentFocus].click();\n      }\n    }\n  });\n  function addActive(x) {\n    /*a function to classify an item as \"active\":*/\n    if (!x) return false;\n    /*start by removing the \"active\" class on all items:*/\n    removeActive(x);\n    if (currentFocus >= x.length) currentFocus = 0;\n    if (currentFocus < 0) currentFocus = x.length - 1;\n    /*add class \"light-autocomplete-active\":*/\n    x[currentFocus].classList.add('light-autocomplete-active');\n  }\n  function removeActive(x) {\n    /*a function to remove the \"active\" class from all autocomplete items:*/\n    for (var i = 0; i < x.length; i++) {\n      x[i].classList.remove('light-autocomplete-active');\n    }\n  }\n  function closeAllLists(elmnt) {\n    /*close all autocomplete lists in the document,\n    except the one passed as an argument:*/\n    var x = document.getElementsByClassName('light-autocomplete-items');\n    for (var i = 0; i < x.length; i++) {\n      if (elmnt != x[i] && elmnt != input) {\n        x[i].parentNode.removeChild(x[i]);\n      }\n    }\n  }\n\n  /*execute a function when someone clicks in the document:*/\n  document.addEventListener('click', function (e) {\n    closeAllLists(e.target);\n  });\n}\n","/**\n * search string from list\n * @param keyword string to search\n * @param dictionary search list\n * @param wildcard when disabled search only for keywrod start with. when enabled push all possible matches.\n */\nexport default function findStr(keyword: string, dictionary: string[], wildcard = false) {\n  const result = ([] as string[])\n    // starts with\n    .concat(dictionary.filter(str => new RegExp('^' + keyword, 'gmi').test(str)))\n    // ends with\n    .concat(dictionary.filter(str => new RegExp(keyword + '$', 'gmi').test(str)));\n  if (wildcard) {\n    // matches\n    result.push(...dictionary.filter(str => str.includes(keyword)));\n    // without vowel words\n    result.push(...dictionary.filter(str => str.includes(keyword)));\n  }\n\n  return result.filter(function (x, i, a) {\n    return a.indexOf(x) === i;\n  });\n}\n"],"names":["autocomplete","input","arrayData","wildcard","console","error","currentFocus","addActive","x","i","length","classList","remove","removeActive","add","closeAllLists","elmnt","document","getElementsByClassName","parentNode","removeChild","addEventListener","e","a","b","keyword","target","value","createElement","setAttribute","id","appendChild","dictionaries","dictionary","result","concat","filter","str","RegExp","test","push","apply","includes","indexOf","findStr","line","innerHTML","replace","getElementsByTagName","getElementById","keyCode","preventDefault","click"],"mappings":"AAQe,SAASA,EAAaC,EAAOC,EAAWC,GAErD,GAAa,MAATF,EAAe,OAAOG,QAAQC,MAAM,+BAGxC,IAAIC,EAiGJ,SAASC,EAAUC,GAEjB,IAAKA,EAAG,OAAO,GAQjB,SAAsBA,GAEpB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAEE,OAAQD,IAC5BD,EAAEC,GAAGE,UAAUC,OAAO,4BAEzB,CAXCC,CAAaL,GACTF,GAAgBE,EAAEE,SAAQJ,EAAe,GACzCA,EAAe,IAAGA,EAAeE,EAAEE,OAAS,GAEhDF,EAAEF,GAAcK,UAAUG,IAAI,4BAC/B,CAOD,SAASC,EAAcC,GAIrB,IADA,IAAIR,EAAIS,SAASC,uBAAuB,4BAC/BT,EAAI,EAAGA,EAAID,EAAEE,OAAQD,IACxBO,GAASR,EAAEC,IAAMO,GAASf,GAC5BO,EAAEC,GAAGU,WAAWC,YAAYZ,EAAEC,GAGnC,CAxHDR,EAAMoB,iBAAiB,SAAS,SAAUC,GACxC,IAAIC,EAAGC,EACP,MAAMC,EAAUH,EAAEI,OAAOC,MAGzB,GADAZ,KACKU,EACH,OAAO,EAETnB,GAAgB,GAEhBiB,EAAIN,SAASW,cAAc,QACzBC,aAAa,KAAMP,EAAEI,OAAOI,GAAK,qBACnCP,EAAEM,aAAa,QAAS,4BAExBP,EAAEI,OAAOP,WAAWY,YAAYR,GAuBhC,MAAMS,EC9Cc,SAAQP,EAAiBQ,EAAsB9B,QAAA,IAAAA,IAAAA,GAAgB,GACrF,IAAM+B,EAAU,GAEbC,OAAOF,EAAWG,QAAO,SAAAC,GAAO,OAAA,IAAIC,OAAO,IAAMb,EAAS,OAAOc,KAAKF,EAAI,KAE1EF,OAAOF,EAAWG,QAAO,SAAAC,GAAO,OAAA,IAAIC,OAAOb,EAAU,IAAK,OAAOc,KAAKF,EAAI,KAQ7E,OAPIlC,IAEF+B,EAAOM,KAAPC,MAAAP,EAAeD,EAAWG,QAAO,SAAAC,GAAO,OAAAA,EAAIK,SAASjB,EAAQ,KAE7DS,EAAOM,KAAPC,MAAAP,EAAeD,EAAWG,QAAO,SAAAC,GAAO,OAAAA,EAAIK,SAASjB,EAAQ,MAGxDS,EAAOE,QAAO,SAAU5B,EAAGC,EAAGc,GACnC,OAAOA,EAAEoB,QAAQnC,KAAOC,CAC1B,GACF,CD8ByBmC,CAAQnB,EAASvB,EAAWC,GAOjD,IAAK,IAAIM,EAAI,EAAGA,EAAIuB,EAAatB,OAAQD,IAAK,CAC5C,MAAMoC,EAAOb,EAAavB,GAC1Be,EAAIP,SAASW,cAAc,QAE3BJ,EAAIP,SAASW,cAAc,QAEzBkB,UAAY,GAIdtB,EAAEsB,WAAaD,EAAKE,QAAQ,IAAIT,OAAOb,EAAS,OAAQ,MAAQA,EAAU,QAE1ED,EAAEsB,WAAa,+BAAiCD,EAAO,KAEvDrB,EAAEH,iBAAiB,SAAS,SAAUC,GAEpCrB,EAAM0B,MAAQL,EAAEI,OAAOsB,qBAAqB,SAAS,GAAGrB,MAGxDZ,GACR,IACMQ,EAAEQ,YAAYP,EACf,CACL,IAGEvB,EAAMoB,iBAAiB,WAAW,SAAUC,GAC1C,IAAId,EAAIS,SAASgC,eAAe3B,EAAEI,OAAOI,GAAK,qBAC1CtB,IAAGA,EAAIA,EAAEwC,qBAAqB,QACjB,IAAb1B,EAAE4B,SAGJ5C,IAEAC,EAAUC,IACY,IAAbc,EAAE4B,SAIX5C,IAEAC,EAAUC,IACY,IAAbc,EAAE4B,UAEX5B,EAAE6B,iBACE7C,GAAgB,GAEdE,GAAGA,EAAEF,GAAc8C,QAG/B,IA6BEnC,SAASI,iBAAiB,SAAS,SAAUC,GAC3CP,EAAcO,EAAEI,OACpB,GACA"}